{
  "workflow": {
    "unique_name": "definition_workflow_02AJL9IYMCBSX61QQsFTKXw7FLs9upGsYhn",
    "name": "XDR- Verify the ThirdParty and Cisco System Atomic Counts",
    "title": "XDR- Verify the ThirdParty and Cisco System Atomic Counts",
    "type": "generic.workflow",
    "base_type": "workflow",
    "variables": [
      {
        "schema_id": "datatype.string",
        "properties": {
          "value": "",
          "scope": "output",
          "name": "Flags_Count",
          "type": "datatype.string",
          "is_required": false,
          "display_on_wizard": false,
          "is_invisible": false
        },
        "unique_name": "variable_workflow_02AJOZMJ7WK6Y0pBryg44yAR0I4ccJ3TJVp",
        "object_type": "variable_workflow"
      },
      {
        "schema_id": "datatype.string",
        "properties": {
          "value": "",
          "scope": "output",
          "name": "WF_Count",
          "type": "datatype.string",
          "is_required": false,
          "display_on_wizard": false,
          "is_invisible": false
        },
        "unique_name": "variable_workflow_02ALSBZPBH2051b0CtmmTAlixgzDvNYDHX1",
        "object_type": "variable_workflow"
      },
      {
        "schema_id": "datatype.integer",
        "properties": {
          "value": 0,
          "scope": "input",
          "name": "Third party system atomic baseline count",
          "type": "datatype.integer",
          "description": "Enter the Value from the DB. execute below command in MangoDB Compass and get the results. then updated count while running automation. \n\n{tenant_id:\"system\",\"properties.atomic.is_atomic\":true,$and:[{\"metadata.flags\":{$ne:null}},{\"metadata.flags\":{$in:[\"third-party\"]}}]}",
          "is_required": false,
          "display_on_wizard": false,
          "is_invisible": false
        },
        "unique_name": "variable_workflow_02AKCLTFLXRLT0LlOEcxQKMW4Q7gXbqURFf",
        "object_type": "variable_workflow"
      },
      {
        "schema_id": "datatype.integer",
        "properties": {
          "value": 0,
          "scope": "input",
          "name": "Cisco system atomic baseline count",
          "type": "datatype.integer",
          "is_required": false,
          "display_on_wizard": false,
          "is_invisible": false
        },
        "unique_name": "variable_workflow_02ALSQDDAA24Y6N4rPibZA2pCdievJOdBpc",
        "object_type": "variable_workflow"
      },
      {
        "schema_id": "datatype.integer",
        "properties": {
          "value": 0,
          "scope": "input",
          "name": "XDR system atomic baseline count",
          "type": "datatype.integer",
          "is_required": false,
          "display_on_wizard": false,
          "is_invisible": false
        },
        "unique_name": "variable_workflow_02AKF16OJFEE67A29w1anjQRpJDGaGYuVdn",
        "object_type": "variable_workflow"
      }
    ],
    "properties": {
      "atomic": {
        "is_atomic": false
      },
      "delete_workflow_instance": false,
      "description": "Defect 26144\n\npre-requisite :\n\nWhile running this WF , User Prompt with Variable , where he need enter the Count of the records , that can be get from the below query. \n\nexecute below command in MangoDB Compass and get the Baseline count of results. then updated count while running automation. \n\n{owner:\"system\",\"properties.atomic.is_atomic\":true,$and:[{\"metadata.flags\":{$ne:null}},{\"metadata.flags\":{$in:[\"third-party\",\"xdr\"]}}]} -- This will Fetch the records flags having third-party and XDR\n\n{owner:\"system\",\"properties.atomic.is_atomic\":true,$and:[{\"metadata.flags\":{$ne:null}},{\"metadata.flags\":[\"xdr\"]}]} -- This will Fetch the records flags having only XDR \n\n{owner:\"system\",\"properties.atomic.is_atomic\":true,$and:[{\"metadata.flags\":{$eq:null}},{\"metadata.flags\":{$nin:[\"third-party\",\"xdr\"]}}]} -- This will Fetch the records Does not having flags ",
      "display_name": "XDR- Verify the ThirdParty and Cisco System Atomic Counts",
      "runtime_user": {
        "target_default": true
      },
      "target": {
        "target_type": "web-service.endpoint",
        "specify_on_workflow_start": true
      }
    },
    "object_type": "definition_workflow",
    "actions": [
      {
        "unique_name": "definition_activity_02AJLADGQX3S61mm5InQqcr8jS7vr1xN4SF",
        "name": "HTTP Request",
        "title": "GET Call to Fetch the Atomics in the system",
        "type": "web-service.http_request",
        "base_type": "activity",
        "properties": {
          "action_timeout": 180,
          "allow_auto_redirect": true,
          "allow_headers_redirect": false,
          "content_type": "application/json",
          "continue_on_error_status_code": false,
          "continue_on_failure": true,
          "display_name": "GET Call to Fetch the Atomics in the system",
          "method": "POST",
          "relative_url": "/api/v1.1/workflows?start=0\u0026limit=100000\u0026sort_by=updated_on\u0026is_atomic=true",
          "runtime_user": {
            "target_default": true
          },
          "skip_execution": false,
          "target": {
            "use_workflow_target": true
          }
        },
        "object_type": "definition_activity"
      },
      {
        "unique_name": "definition_activity_02AJM174GNHFJ6SkyOCfrOnqvP8xSgRlBPS",
        "name": "JSONPath Query",
        "title": "Fetch the Atomics Created by System",
        "type": "corejava.jsonpathquery",
        "base_type": "activity",
        "properties": {
          "action_timeout": 180,
          "continue_on_failure": true,
          "display_name": "Fetch the Atomics Created by System",
          "input_json": "$activity.definition_activity_02AJLADGQX3S61mm5InQqcr8jS7vr1xN4SF.output.response_body$",
          "jsonpath_queries": [
            {
              "jsonpath_query": "$.results[?(@.owner=='system')]",
              "jsonpath_query_name": "WF_Having_System_Owner",
              "jsonpath_query_type": "string",
              "zdate_type_format": "yyyy-MM-dd'T'HH:mm:ssZ"
            }
          ],
          "skip_execution": false
        },
        "object_type": "definition_activity"
      },
      {
        "unique_name": "definition_activity_02AJOS6THXAG32kU2W6DGarkPmuEUmidhxc",
        "name": "JSONPath Query",
        "title": "Fetch Flags",
        "type": "corejava.jsonpathquery",
        "base_type": "activity",
        "properties": {
          "action_timeout": 180,
          "continue_on_failure": true,
          "display_name": "Fetch Flags",
          "input_json": "$activity.definition_activity_02AJM174GNHFJ6SkyOCfrOnqvP8xSgRlBPS.output.jsonpath_queries.WF_Having_System_Owner$",
          "jsonpath_queries": [
            {
              "jsonpath_query": "$..metadata.flags",
              "jsonpath_query_name": "Flags",
              "jsonpath_query_type": "string",
              "zdate_type_format": "yyyy-MM-dd'T'HH:mm:ssZ"
            }
          ],
          "skip_execution": false
        },
        "object_type": "definition_activity"
      },
      {
        "unique_name": "definition_activity_02ALS9TW0F91V3Bj2e8F2QCqE1TuVej41JQ",
        "name": "JSONPath Query",
        "title": "Fetch the Record that Does Not Contain flags",
        "type": "corejava.jsonpathquery",
        "base_type": "activity",
        "properties": {
          "action_timeout": 180,
          "continue_on_failure": true,
          "display_name": "Fetch the Record that Does Not Contain flags",
          "input_json": "$activity.definition_activity_02AJM174GNHFJ6SkyOCfrOnqvP8xSgRlBPS.output.jsonpath_queries.WF_Having_System_Owner$",
          "jsonpath_queries": [
            {
              "jsonpath_query": "$.results[?(!@.metadata.flags || @.metadata.flags.length == 0)]",
              "jsonpath_query_name": "no_flags",
              "jsonpath_query_type": "string",
              "zdate_type_format": "yyyy-MM-dd'T'HH:mm:ssZ"
            }
          ],
          "skip_execution": false
        },
        "object_type": "definition_activity"
      },
      {
        "unique_name": "definition_activity_02ALSEQ5AGXXL4WaC29jHZhJdDaImm6EGao",
        "name": "JSONPath Query",
        "title": "Fetch the Count of the Records that Does Not Contain flags",
        "type": "corejava.jsonpathquery",
        "base_type": "activity",
        "properties": {
          "action_timeout": 180,
          "continue_on_failure": true,
          "display_name": "Fetch the Count of the Records that Does Not Contain flags",
          "input_json": "$activity.definition_activity_02ALS9TW0F91V3Bj2e8F2QCqE1TuVej41JQ.output.jsonpath_queries.no_flags$",
          "jsonpath_queries": [
            {
              "jsonpath_query": "$.length()",
              "jsonpath_query_name": "No_Of_Records_That_Does_not_Contain_Flags",
              "jsonpath_query_type": "string",
              "zdate_type_format": "yyyy-MM-dd'T'HH:mm:ssZ"
            }
          ],
          "skip_execution": false
        },
        "object_type": "definition_activity"
      },
      {
        "unique_name": "definition_activity_02AJP4BUUZWLL3lH7NGRp6SnCR88Z8Hg2fA",
        "name": "Execute Python Script",
        "title": "Execute Python Script",
        "type": "python3.script",
        "base_type": "activity",
        "properties": {
          "action_timeout": 180,
          "continue_on_failure": true,
          "display_name": "Execute Python Script",
          "script": "data = $activity.definition_activity_02AJOS6THXAG32kU2W6DGarkPmuEUmidhxc.output.jsonpath_queries.Flags$\n\ncount_of_third_party_and_XDR = sum(item == [\"third-party\",\"xdr\"] for item in data)\n\n# Count of arrays that contain only \"xdr\"\ncount_of_only_xdr = sum(item == [\"xdr\"] for item in data)\n\n# Total \nTotal = count_of_third_party_and_XDR + count_of_only_xdr\n\nprint(\"Count of 'third-party and XDR':\", count_of_third_party_and_XDR)\nprint(\"Count of arrays with only 'xdr':\", count_of_only_xdr)\nprint(\"Count of Total arrays :\", Total)",
          "skip_execution": false
        },
        "object_type": "definition_activity"
      },
      {
        "unique_name": "definition_activity_02AJOYYRL784K3BcVzzJTsh3sBsx6t0WThk",
        "name": "Set Variables",
        "title": "Store the Count having third-party and XDR flag",
        "type": "core.set_multiple_variables",
        "base_type": "activity",
        "properties": {
          "continue_on_failure": true,
          "display_name": "Store the Count having third-party and XDR flag",
          "skip_execution": false,
          "variables_to_update": [
            {
              "variable_to_update": "$workflow.definition_workflow_02AJL9IYMCBSX61QQsFTKXw7FLs9upGsYhn.output.variable_workflow_02AJOZMJ7WK6Y0pBryg44yAR0I4ccJ3TJVp$",
              "variable_value_new": "$activity.definition_activity_02AJP4BUUZWLL3lH7NGRp6SnCR88Z8Hg2fA.output.response_body$\n------------------------------------------------------------------------------------------\nWF having no Flags , Cisco Based Atomic WF -- $activity.definition_activity_02ALSEQ5AGXXL4WaC29jHZhJdDaImm6EGao.output.jsonpath_queries.No_Of_Records_That_Does_not_Contain_Flags$"
            }
          ]
        },
        "object_type": "definition_activity"
      },
      {
        "unique_name": "definition_activity_02AKCH2DNDVS26tIw6OOXF4EP2rTncvVqJO",
        "name": "Condition Block",
        "title": "Verify the Count",
        "type": "logic.if_else",
        "base_type": "activity",
        "properties": {
          "continue_on_failure": false,
          "display_name": "Verify the Count",
          "skip_execution": false
        },
        "object_type": "definition_activity",
        "blocks": [
          {
            "unique_name": "definition_activity_02AKCH2DUNHND4Y3yvg71jxxMwnzKRfiAfR",
            "name": "Condition Branch",
            "title": "Matched , then Mark Test as Passed",
            "type": "logic.condition_block",
            "base_type": "activity",
            "properties": {
              "condition": {
                "left_operand": {
                  "left_operand": {
                    "left_operand": "$workflow.definition_workflow_02AJL9IYMCBSX61QQsFTKXw7FLs9upGsYhn.output.variable_workflow_02AJOZMJ7WK6Y0pBryg44yAR0I4ccJ3TJVp$",
                    "operator": "mregex",
                    "right_operand": "Count of 'third-party and XDR':\\s*$workflow.definition_workflow_02AJL9IYMCBSX61QQsFTKXw7FLs9upGsYhn.input.variable_workflow_02AKCLTFLXRLT0LlOEcxQKMW4Q7gXbqURFf$"
                  },
                  "operator": "and",
                  "right_operand": {
                    "left_operand": "$workflow.definition_workflow_02AJL9IYMCBSX61QQsFTKXw7FLs9upGsYhn.output.variable_workflow_02AJOZMJ7WK6Y0pBryg44yAR0I4ccJ3TJVp$",
                    "operator": "mregex",
                    "right_operand": "Count of arrays with only 'xdr':\\s*$workflow.definition_workflow_02AJL9IYMCBSX61QQsFTKXw7FLs9upGsYhn.input.variable_workflow_02AKF16OJFEE67A29w1anjQRpJDGaGYuVdn$"
                  }
                },
                "operator": "and",
                "right_operand": {
                  "left_operand": "$activity.definition_activity_02ALSEQ5AGXXL4WaC29jHZhJdDaImm6EGao.output.jsonpath_queries.No_Of_Records_That_Does_not_Contain_Flags$",
                  "operator": "eq",
                  "right_operand": "$workflow.definition_workflow_02AJL9IYMCBSX61QQsFTKXw7FLs9upGsYhn.input.variable_workflow_02ALSQDDAA24Y6N4rPibZA2pCdievJOdBpc$"
                }
              },
              "continue_on_failure": false,
              "display_name": "Matched , then Mark Test as Passed",
              "skip_execution": false
            },
            "object_type": "definition_activity",
            "actions": [
              {
                "unique_name": "definition_activity_02ALSC70AT8HR0tRukuchofS7HlAVr7LBxd",
                "name": "Set Variables",
                "title": "Set the WF Count",
                "type": "core.set_multiple_variables",
                "base_type": "activity",
                "properties": {
                  "continue_on_failure": false,
                  "display_name": "Set the WF Count",
                  "skip_execution": false,
                  "variables_to_update": [
                    {
                      "variable_to_update": "$workflow.definition_workflow_02AJL9IYMCBSX61QQsFTKXw7FLs9upGsYhn.output.variable_workflow_02ALSBZPBH2051b0CtmmTAlixgzDvNYDHX1$",
                      "variable_value_new": "$workflow.definition_workflow_02AJL9IYMCBSX61QQsFTKXw7FLs9upGsYhn.output.variable_workflow_02AJOZMJ7WK6Y0pBryg44yAR0I4ccJ3TJVp$"
                    }
                  ]
                },
                "object_type": "definition_activity"
              },
              {
                "unique_name": "definition_activity_02AKCI5BBCF360MVCixJ8aUW0JfUONtKUcX",
                "name": "Completed",
                "title": "Mark Test as Passed-Third-Party Counts Are Matched",
                "type": "logic.completed",
                "base_type": "activity",
                "properties": {
                  "completion_type": "succeeded",
                  "continue_on_failure": false,
                  "display_name": "Mark Test as Passed-Third-Party Counts Are Matched",
                  "skip_execution": false
                },
                "object_type": "definition_activity"
              }
            ]
          }
        ]
      },
      {
        "unique_name": "definition_activity_02AKCIAI3PIR96qE1Bsrna4OTyDogyqP6Bq",
        "name": "Completed",
        "title": "Mark Test as Failed - Third-Party Counts Are MissMatched",
        "type": "logic.completed",
        "base_type": "activity",
        "properties": {
          "completion_type": "failed-completed",
          "continue_on_failure": false,
          "display_name": "Mark Test as Failed - Third-Party Counts Are MissMatched",
          "skip_execution": false
        },
        "object_type": "definition_activity"
      }
    ],
    "categories": [
      "category_1BMfMXSnJMyt5Ihqi7rWJr5N8cf"
    ]
  }
}