{
  "workflow": {
    "unique_name": "definition_workflow_02I7SLWPWTELD4xowUQOLkKNMOLrmPHu9QC",
    "name": "XDR-Incident Analysis WF-Oct25",
    "title": "XDR-Incident Analysis WF-Oct25",
    "type": "generic.workflow",
    "base_type": "workflow",
    "variables": [
      {
        "schema_id": "datatype.string",
        "properties": {
          "value": "[]",
          "scope": "local",
          "name": "Observables to Investigate",
          "type": "datatype.string",
          "description": "A list of filtered observables to investigate. This will be populated automatically",
          "is_required": false,
          "display_on_wizard": false,
          "is_invisible": false,
          "variable_string_format": "json"
        },
        "unique_name": "variable_workflow_02I7SLWQG2HWI48YbsBhzkzvZ4gpadrMUyn",
        "object_type": "variable_workflow"
      },
      {
        "schema_id": "datatype.string",
        "properties": {
          "value": "",
          "scope": "local",
          "name": "file_path",
          "type": "datatype.string",
          "is_required": false,
          "display_on_wizard": false,
          "is_invisible": false,
          "variable_string_format": "text"
        },
        "unique_name": "variable_workflow_02I7SLWQG2QSU6S29vhMjFkAkDmq3zfPkYx",
        "object_type": "variable_workflow"
      },
      {
        "schema_id": "datatype.string",
        "properties": {
          "value": "quiet",
          "scope": "input",
          "name": "mode",
          "type": "datatype.string",
          "description": "Which investigation mode to use. This must be one of: quiet, moderate, noisy",
          "is_required": true,
          "display_on_wizard": false,
          "is_invisible": false,
          "variable_string_format": "text"
        },
        "unique_name": "variable_workflow_02I7SLWQG36EW63idWgtbMVyCBu094Ufp8D",
        "object_type": "variable_workflow"
      },
      {
        "schema_id": "datatype.string",
        "properties": {
          "value": "",
          "scope": "input",
          "name": "chain_id",
          "type": "datatype.string",
          "is_required": true,
          "display_on_wizard": false,
          "is_invisible": false,
          "variable_string_format": "text"
        },
        "unique_name": "variable_workflow_02I7SLWQG2YYY3c9nqBK1ZEtuiwfg8gYUyZ",
        "object_type": "variable_workflow"
      },
      {
        "schema_id": "datatype.string",
        "properties": {
          "value": "{\n  \"critical\": [\n    {\n      \"type\": \"sha256\",\n      \"value\": \"9095bcc875a27852ea329bab7ffd490f13a07244a36f9637c67b0c9dcc3d523f\"\n    },\n    {\n      \"type\": \"ip\",\n      \"value\": \"192.168.76.22\"\n    },\n    {\n      \"type\": \"ipv6\",\n      \"value\": \"2001:0000:130F:0000:0000:09C0:876A:130B\"\n    },\n    {\n      \"type\": \"domain\",\n      \"value\": \"somethingmalicious.com\"\n    },\n    {\n      \"type\": \"url\",\n      \"value\": \"https://internetbadguys.com/some/path\"\n    },\n    {\n      \"type\": \"email\",\n      \"value\": \"cheesecake@gmail.com\"\n    }\n  ],\n  \"high\": [\n    {\n      \"type\": \"sha256\",\n      \"value\": \"72f4d481924479030db441ef1054b3a80d440e4b6479f16fa0228d7915c47107\"\n    },\n    {\n      \"type\": \"ip\",\n      \"value\": \"8.78.33.44\"\n    },\n    {\n      \"type\": \"ipv6\",\n      \"value\": \"1050:0:0:0:5:600:300c:326b\"\n    },\n    {\n      \"type\": \"domain\",\n      \"value\": \"anotherdomain.com\"\n    },\n    {\n      \"type\": \"url\",\n      \"value\": \"https://cisco.com/en-us/whatever\"\n    },\n    {\n      \"type\": \"email\",\n      \"value\": \"anotheremail@somedomain.com\"\n    }\n  ],\n  \"medium\": [\n    {\n      \"type\": \"sha256\",\n      \"value\": \"72f4d481924479030db441ef1054b3a80d552e4b6479f16fa0228d7915c26587\"\n    },\n    {\n      \"type\": \"ip\",\n      \"value\": \"87.33.89.2\"\n    },\n    {\n      \"type\": \"ipv6\",\n      \"value\": \"1050:0:0:0:5:500:300c:326b\"\n    },\n    {\n      \"type\": \"domain\",\n      \"value\": \"asupercoolwebsite.com\"\n    },\n    {\n      \"type\": \"url\",\n      \"value\": \"https://somewhereamazing.com/blog/blog2.html\"\n    },\n    {\n      \"type\": \"email\",\n      \"value\": \"user76@somedomain.com\"\n    }\n  ],\n  \"low\": [\n    {\n      \"type\": \"sha256\",\n      \"value\": \"72f4d568542158630db441ef1054b3a80d552e4b6479f16fa0228d7915c12358\"\n    },\n    {\n      \"type\": \"ip\",\n      \"value\": \"167.7.22.89\"\n    },\n    {\n      \"type\": \"ipv6\",\n      \"value\": \"1050:0:0:0:5:400:300c:326b\"\n    },\n    {\n      \"type\": \"domain\",\n      \"value\": \"mywebsiteisamazing.com\"\n    },\n    {\n      \"type\": \"url\",\n      \"value\": \"https://cnn.com/some/random/news\"\n    },\n    {\n      \"type\": \"email\",\n      \"value\": \"bob_jones@anotherdomain.com\"\n    }\n  ]\n}",
          "scope": "input",
          "name": "observables",
          "type": "datatype.string",
          "description": "A JSON-formatted list of prioritized observables. Supported priorities include: critical, high, medium, low",
          "is_required": true,
          "display_on_wizard": false,
          "is_invisible": false,
          "variable_string_format": "json"
        },
        "unique_name": "variable_workflow_02I7SLWQG267W78c8ppu8iWsZKBMMYB54wf",
        "object_type": "variable_workflow"
      },
      {
        "schema_id": "datatype.string",
        "properties": {
          "value": "sha256,process_name,process_hash,ip,ipv6,url,user",
          "scope": "local",
          "name": "Supported Observables",
          "type": "datatype.string",
          "description": "A comma-separated list of observable types the workflow should support and investigate. Observables with a type not in this list will be ignored",
          "is_required": false,
          "display_on_wizard": false,
          "is_invisible": false,
          "variable_string_format": "text"
        },
        "unique_name": "variable_workflow_02I7SLWQG3FFL4Bxnn35oEO9fMlnRkzLTth",
        "object_type": "variable_workflow"
      }
    ],
    "properties": {
      "atomic": {
        "is_atomic": false
      },
      "delete_workflow_instance": false,
      "description": "This workflow parses and investigates a list of prioritized observables from the Cisco XDR data platform.\n\nTargets: Automation APIs, Conure APIs, Platform APIs\n\nSteps:\n[] Process the available XDR integrations\n[] Process and filter the observables provided\n[] For each observable type:\n[]\u003e Which investigation mode is being requested?\n[]\u003e\u003e If the mode is quiet: deliberate the observables and filter out observables with a clean disposition\n[]\u003e\u003e If the mode is moderate or noisy: use the observable list unfiltered\n[]\u003e Build the investigation request payload\n[]\u003e Request an investigation be created\n[]\u003e Check if the request was successful:\n[]\u003e\u003e If it was, attempt to extract the investigation ID and append it to the output list\n[]\u003e\u003e If it wasn't, output an error",
      "display_name": "XDR-Incident Analysis WF-Oct25",
      "runtime_user": {
        "target_default": true
      },
      "target": {
        "execute_on_target_group": true,
        "target_group": {
          "target_group_id": "target_group_01HLKTH50I3ZU5IfL3dwQos38eRFcE5gYjM",
          "run_on_all_targets": false,
          "selected_target_types": [
            "web-service.endpoint"
          ],
          "use_criteria": {
            "choose_target_using_algorithm": "choose_first_with_matching_criteria",
            "conditions": [
              {
                "operator": "eqi",
                "left_operand": "$targetgroup.web-service endpoint.input.display_name$",
                "right_operand": "Automation APIs"
              }
            ]
          }
        }
      },
      "wf_metadata": {
        "coa": {
          "intent": "incident_analysis"
        }
      }
    },
    "object_type": "definition_workflow",
    "actions": [
      {
        "unique_name": "definition_activity_02I7SLWVONIYD1cKaqhLHUqOZa2LXPODA42",
        "name": "Group",
        "title": "Process integrations",
        "type": "logic.group",
        "base_type": "activity",
        "properties": {
          "continue_on_failure": false,
          "display_name": "Process integrations",
          "skip_execution": false
        },
        "object_type": "definition_activity",
        "actions": [
          {
            "unique_name": "definition_activity_02I7SLWY5UARJ6kAP6EbRzxXHYibvqgNH8H",
            "name": "XDR - Administration - Get Integration Instances",
            "title": "XDR - Administration - Get Integration Instances",
            "type": "workflow.atomic_workflow",
            "base_type": "subworkflow",
            "properties": {
              "continue_on_failure": false,
              "display_name": "XDR - Administration - Get Integration Instances",
              "input": {
                "variable_workflow_02I0BA092EDR01iwLcaRQb5LD2fTIOaDjJn": ""
              },
              "runtime_user": {
                "target_default": true
              },
              "skip_execution": false,
              "target": {
                "override_workflow_target_group_criteria": true,
                "target_group": {
                  "run_on_all_targets": false,
                  "use_criteria": {
                    "choose_target_using_algorithm": "choose_first_with_matching_criteria",
                    "conditions": [
                      {
                        "left_operand": "$targetgroup.web-service endpoint.input.display_name$",
                        "operator": "eqi",
                        "right_operand": "Platform APIs"
                      }
                    ]
                  }
                }
              },
              "workflow_id": "definition_workflow_02HSRQ9SJD8SX2olZihv5ICOd5MggSxVfUD",
              "workflow_name": "XDR - Administration - Get Integration Instances"
            },
            "object_type": "definition_activity"
          },
          {
            "unique_name": "definition_activity_02I7SLX01VIT62ks2ASqfP2szCkqP4niOfw",
            "name": "Execute Python Script",
            "title": "Process integrations",
            "type": "python3.script",
            "base_type": "activity",
            "properties": {
              "action_timeout": 180,
              "continue_on_failure": false,
              "display_name": "Process integrations",
              "script": "import sys\nimport json\n\nintegrations = json.loads(sys.argv[1])\n\nintegrationCategories = {\n  'endpoint': [\n    '180768a2-375d-4aa1-84c1-f3c7da8aa7a8', # Palo Alto Networks Cortex XDR\n  ],\n  'dns': [\n    '188d70f7-29d5-5069-9098-d83a3ec8e797', # Umbrella\n    '3cba0c69-31a4-47ba-96c0-8aab4c75fc36', # Cisco Secure Access\n  ],\n  'network': [\n    '65226ec8-2501-4028-88b8-87a3713cf44c', # Exabeam (NAM)\n    '62d6dc99-9c7e-49e1-b5cc-bc708428258a', # Exabeam (EU)\n    'ce7b814c-a146-4167-b44c-6cadfc347fa6', # Exabeam (APJC)\n    '14cc299f-d0ca-4f3a-8ee4-0faeea39d1d7', # Darktrace /NETWORK\n  ],\n  'email': [\n    '5c0b669f-ed4b-5d7f-a892-117d09bd9b85', # Secure Email and Web Manager\n    'b2219f60-8ccf-5b1d-afb0-778ccd72dcdd', # Secure Email Appliance\n  ],\n  'firewall': [\n    '699f0419-9565-4f42-b206-bf39b7a9f626', # Check Point Quantum Smart-1 Cloud\n    'daea880c-eec4-4a20-93d9-bd47185228dc', # Palo Alto Networks Firewalls with Strata Logging Service\n    '544e6371-9f0c-573e-a31c-d44f7ae65c92', # Secure Firewall\n  ]\n}\n\nintegrationMap = {\n  'sha256': { 'supported': integrationCategories['endpoint'] + integrationCategories['email'], 'discovered': [], 'discoveredModuleInstances': [] },\n  'process_name': { 'supported': integrationCategories['endpoint'] + integrationCategories['email'], 'discovered': [], 'discoveredModuleInstances': [] },\n  'process_hash': { 'supported': integrationCategories['endpoint'] + integrationCategories['email'], 'discovered': [], 'discoveredModuleInstances': [] },\n  'ip': { 'supported': integrationCategories['endpoint'] + integrationCategories['email'], 'discovered': [], 'discoveredModuleInstances': [] },\n  'ipv6': { 'supported': integrationCategories['endpoint'] + integrationCategories['email'], 'discovered': [], 'discoveredModuleInstances': [] },\n  'url': { 'supported': integrationCategories['endpoint'] + integrationCategories['email'], 'discovered': [], 'discoveredModuleInstances': [] },\n  'user': { 'supported': integrationCategories['endpoint'] + integrationCategories['email'] + integrationCategories['network'] + integrationCategories['firewall'], 'discovered': [], 'discoveredModuleInstances': [] },\n  'email': { 'supported': integrationCategories['endpoint'] + integrationCategories['email'] + integrationCategories['network'] + integrationCategories['firewall'], 'discovered': [], 'discoveredModuleInstances': [] }\n}\n\nfor integration in integrations:\n  for observableType in integrationMap:\n    if integration['module_type_id'] in integrationMap[observableType]['supported']:\n      integrationMap[observableType]['discovered'].append({\n        'name': integration['name'],\n        'module_type_id': integration['module_type_id'],\n        'module_instance_id': integration['id']\n      })\n      \n      integrationMap[observableType]['discoveredModuleInstances'].append(integration['id'])\n\nintegrationsOut = {}\n\nfor observableType in integrationMap:\n  integrationsOut[observableType] = integrationMap[observableType]['discoveredModuleInstances']\n\nintegrationsOut = json.dumps(integrationsOut)",
              "script_arguments": [
                "$activity.definition_activity_02I7SLWY5UARJ6kAP6EbRzxXHYibvqgNH8H.output.variable_workflow_02HSRQ9SQ5TQU2jP192QwMXBnGcvHQlpFaj$"
              ],
              "script_queries": [
                {
                  "script_query": "integrationsOut",
                  "script_query_name": "integrationsOut",
                  "script_query_type": "string"
                }
              ],
              "skip_execution": false
            },
            "object_type": "definition_activity"
          }
        ]
      },
      {
        "unique_name": "definition_activity_02I7SLX1MSSY8090bo6LJN56jxdDvWprUIE",
        "name": "Group",
        "title": "Process observables",
        "type": "logic.group",
        "base_type": "activity",
        "properties": {
          "continue_on_failure": false,
          "display_name": "Process observables",
          "skip_execution": false
        },
        "object_type": "definition_activity",
        "actions": [
          {
            "unique_name": "definition_activity_02I7SLX3CHTFY5Hh62OvjOxTssEL5gLZZ5V",
            "name": "Execute Python Script",
            "title": "Format observables",
            "type": "python3.script",
            "base_type": "activity",
            "properties": {
              "action_timeout": 180,
              "continue_on_failure": false,
              "display_name": "Format observables",
              "script": "import sys\nimport json\n\nobservableInput = json.loads(sys.argv[1])\nsupportedObservables = sys.argv[2].split(',')\nmode = sys.argv[3]\n\nobservablesByType = {}\nobservablesOut = []\n\nfor severity, observables in observableInput.items():\n  if mode in [ 'quiet', 'moderate' ] and severity not in [ 'critical', 'high' ]: continue\n\n  for observable in observables:\n    if observable['type'] in observablesByType and observable not in observablesByType[observable['type']]:\n      observablesByType[observable['type']].append(observable)\n    else:\n      observablesByType[observable['type']] = [ observable ]\n\nfor observableType in observablesByType:\n  if observableType not in supportedObservables: continue\n\n  observablesOut.append({\n    'type': observableType,\n    'observables': observablesByType[observableType]\n  })\n\nobservablesOut = json.dumps(observablesOut)",
              "script_arguments": [
                "$workflow.definition_workflow_02I7SLWPWTELD4xowUQOLkKNMOLrmPHu9QC.input.variable_workflow_02I7SLWQG267W78c8ppu8iWsZKBMMYB54wf$",
                "$workflow.definition_workflow_02I7SLWPWTELD4xowUQOLkKNMOLrmPHu9QC.local.variable_workflow_02I7SLWQG3FFL4Bxnn35oEO9fMlnRkzLTth$",
                "$workflow.definition_workflow_02I7SLWPWTELD4xowUQOLkKNMOLrmPHu9QC.input.variable_workflow_02I7SLWQG36EW63idWgtbMVyCBu094Ufp8D$"
              ],
              "script_queries": [
                {
                  "script_query": "observablesOut",
                  "script_query_name": "observablesOut",
                  "script_query_type": "string"
                }
              ],
              "skip_execution": false
            },
            "object_type": "definition_activity"
          },
          {
            "unique_name": "definition_activity_02I7SLX4Z9Q0N3z6DuSV0SLVmN8jgV9qEnh",
            "name": "Read Table from JSON",
            "title": "Read observables to table",
            "type": "corejava.read_table_from_json",
            "base_type": "activity",
            "properties": {
              "action_timeout": 180,
              "continue_on_failure": false,
              "display_name": "Read observables to table",
              "input_json": "$activity.definition_activity_02I7SLX3CHTFY5Hh62OvjOxTssEL5gLZZ5V.output.script_queries.observablesOut$",
              "jsonpath_query": "$.",
              "persist_output": false,
              "populate_columns": false,
              "skip_execution": false,
              "table_columns": [
                {
                  "column_name": "type",
                  "column_type": "string"
                },
                {
                  "column_name": "observables",
                  "column_type": "string"
                }
              ]
            },
            "object_type": "definition_activity"
          }
        ]
      },
      {
        "unique_name": "definition_activity_02I7SLX722SQZ5qnd7Mk2oMX2Str2AI7FmV",
        "name": "For Each",
        "title": "For each observable type",
        "type": "logic.for_each",
        "base_type": "activity",
        "properties": {
          "continue_on_failure": false,
          "display_name": "For each observable type",
          "skip_execution": false,
          "source_array": "$activity.definition_activity_02I7SLX4Z9Q0N3z6DuSV0SLVmN8jgV9qEnh.output.read_table_from_json$"
        },
        "object_type": "definition_activity",
        "actions": [
          {
            "unique_name": "definition_activity_02I7SLX91D0RD6s3YlvWuK258SltFmRgDgx",
            "name": "Condition Block",
            "title": "Which mode is being used?",
            "type": "logic.if_else",
            "base_type": "activity",
            "properties": {
              "conditions": [],
              "continue_on_failure": false,
              "display_name": "Which mode is being used?",
              "skip_execution": false
            },
            "object_type": "definition_activity",
            "blocks": [
              {
                "unique_name": "definition_activity_02I7SLXA4WA6Z2b5LIKlLqojsuMc0SN67Zw",
                "name": "Condition Branch",
                "title": "Quiet",
                "type": "logic.condition_block",
                "base_type": "activity",
                "properties": {
                  "condition": {
                    "left_operand": "$workflow.definition_workflow_02I7SLWPWTELD4xowUQOLkKNMOLrmPHu9QC.input.variable_workflow_02I7SLWQG36EW63idWgtbMVyCBu094Ufp8D$",
                    "operator": "eqi",
                    "right_operand": "quiet"
                  },
                  "continue_on_failure": false,
                  "display_name": "Quiet",
                  "skip_execution": false
                },
                "object_type": "definition_activity",
                "actions": [
                  {
                    "unique_name": "definition_activity_02I7SLXCFR8US2m984x9Ju1rg1Z0YDEUun0",
                    "name": "XDR - Investigate - Deliberate Observables",
                    "title": "XDR - Investigate - Deliberate Observables",
                    "type": "workflow.atomic_workflow",
                    "base_type": "subworkflow",
                    "properties": {
                      "continue_on_failure": true,
                      "display_name": "XDR - Investigate - Deliberate Observables",
                      "input": {
                        "variable_workflow_029824ANUJZ160sI3iLAAzmNA9jO0LTSy4z": "$activity.definition_activity_02I7SLX722SQZ5qnd7Mk2oMX2Str2AI7FmV.input.source_array[@].observables$"
                      },
                      "runtime_user": {
                        "target_default": true
                      },
                      "skip_execution": false,
                      "target": {
                        "override_workflow_target_group_criteria": true,
                        "target_group": {
                          "run_on_all_targets": false,
                          "use_criteria": {
                            "choose_target_using_algorithm": "choose_first_with_matching_criteria",
                            "conditions": [
                              {
                                "left_operand": "$targetgroup.web-service endpoint.input.display_name$",
                                "operator": "eqi",
                                "right_operand": "Platform APIs"
                              }
                            ]
                          }
                        }
                      },
                      "workflow_id": "definition_workflow_029824AN9OC6K34kBzqjL6SXC0s68449YGU",
                      "workflow_name": "XDR - Investigate - Deliberate Observables"
                    },
                    "object_type": "definition_activity"
                  },
                  {
                    "unique_name": "definition_activity_02I7SLXEDWGQW0kTsZetOJN8OSoJiuqxSxp",
                    "name": "Condition Block",
                    "title": "Was deliberation successful?",
                    "type": "logic.if_else",
                    "base_type": "activity",
                    "properties": {
                      "conditions": [],
                      "continue_on_failure": false,
                      "display_name": "Was deliberation successful?",
                      "skip_execution": false
                    },
                    "object_type": "definition_activity",
                    "blocks": [
                      {
                        "unique_name": "definition_activity_02I7SLXFOTC2M0wD8XDMzr0WlX03LBqfQY7",
                        "name": "Condition Branch",
                        "title": "No",
                        "type": "logic.condition_block",
                        "base_type": "activity",
                        "properties": {
                          "condition": {
                            "left_operand": "$activity.definition_activity_02I7SLXCFR8US2m984x9Ju1rg1Z0YDEUun0.output.succeeded$",
                            "operator": "eq",
                            "right_operand": false
                          },
                          "continue_on_failure": false,
                          "display_name": "No",
                          "skip_execution": false
                        },
                        "object_type": "definition_activity",
                        "actions": [
                          {
                            "unique_name": "definition_activity_02I7SLXH7IAIG3G4ll5aJg5yYgoRymFPDz3",
                            "name": "Completed",
                            "title": "Failed",
                            "type": "logic.completed",
                            "base_type": "activity",
                            "properties": {
                              "completion_type": "failed-completed",
                              "continue_on_failure": false,
                              "display_name": "Failed",
                              "result_message": "Failed to deliberate for $activity.definition_activity_02I7SLX722SQZ5qnd7Mk2oMX2Str2AI7FmV.input.source_array[@].type$ observables",
                              "skip_execution": false
                            },
                            "object_type": "definition_activity"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "unique_name": "definition_activity_02I7SLXIIGWUR1ELLfDN9m3yMir2eewgkG0",
                    "name": "Execute Python Script",
                    "title": "Process the deliberation results",
                    "type": "python3.script",
                    "base_type": "activity",
                    "properties": {
                      "action_timeout": 180,
                      "continue_on_failure": false,
                      "display_name": "Process the deliberation results",
                      "script": "import sys\nimport json\n\nallObservables = json.loads(sys.argv[1])\ndeliberateResults = json.loads(sys.argv[2])\n\nobservablesReturned = {}\n\nif 'data' in deliberateResults:\n  for module in deliberateResults['data']:\n    if 'verdicts' in module['data']:\n      if 'docs' in module['data']['verdicts']:\n        for verdict in module['data']['verdicts']['docs']:\n          observableKey = verdict['observable']['type'] + ':' + verdict['observable']['value']\n          \n          if observableKey in observablesReturned and verdict['disposition_name'].lower() in [ 'clean', 'malicious', 'suspicious', 'unknown' ]:\n            observablesReturned[observableKey][verdict['disposition_name'].lower() + '_count'] += 1;\n          else:\n            observablesReturned[observableKey] = {\n              'type': verdict['observable']['type'],\n              'value': verdict['observable']['value'],\n              'clean_count': 1 if verdict['disposition_name'].lower() == 'clean' else 0,\n              'malicious_count': 1 if verdict['disposition_name'].lower() == 'malicious' else 0,\n              'suspicious_count': 1 if verdict['disposition_name'].lower() == 'suspicious' else 0,\n              'unknown_count': 1 if verdict['disposition_name'].lower() == 'unknown' else 0\n            }\n\nfor observable in allObservables:\n  observableKey = observable['type'] + ':' + observable['value']\n  \n  if observableKey not in observablesReturned:\n    observablesReturned[observableKey] = {\n      'type': observable['type'],\n      'value': observable['value'],\n      'clean_count': 0,\n      'malicious_count': 0,\n      'suspicious_count': 0,\n      'unknown_count': 0\n    }\n\nobservablesOut = []\n\nfor observableKey in observablesReturned:\n  observable = observablesReturned[observableKey]\n  \n  if observable['clean_count'] == 0:\n    observablesOut.append({\n      'type': observable['type'],\n      'value': observable['value']\n    })\n\nobservablesOut = json.dumps(observablesOut)",
                      "script_arguments": [
                        "$activity.definition_activity_02I7SLX722SQZ5qnd7Mk2oMX2Str2AI7FmV.input.source_array[@].observables$",
                        "$activity.definition_activity_02I7SLXCFR8US2m984x9Ju1rg1Z0YDEUun0.output.variable_workflow_029824ANUJACZ0uBon29pn4OPF7PkXpbQM6$"
                      ],
                      "script_queries": [
                        {
                          "script_query": "observablesOut",
                          "script_query_name": "observablesOut",
                          "script_query_type": "string"
                        }
                      ],
                      "skip_execution": false
                    },
                    "object_type": "definition_activity"
                  },
                  {
                    "unique_name": "definition_activity_02I7SLXKCP0572NE4rY3mPCvcELDTyR53ld",
                    "name": "Set Variables",
                    "title": "Set local variable",
                    "type": "core.set_multiple_variables",
                    "base_type": "activity",
                    "properties": {
                      "continue_on_failure": false,
                      "display_name": "Set local variable",
                      "skip_execution": false,
                      "variables_to_update": [
                        {
                          "variable_to_update": "$workflow.definition_workflow_02I7SLWPWTELD4xowUQOLkKNMOLrmPHu9QC.local.variable_workflow_02I7SLWQG2HWI48YbsBhzkzvZ4gpadrMUyn$",
                          "variable_value_new": "$activity.definition_activity_02I7SLXIIGWUR1ELLfDN9m3yMir2eewgkG0.output.script_queries.observablesOut$"
                        }
                      ]
                    },
                    "object_type": "definition_activity"
                  }
                ]
              },
              {
                "unique_name": "definition_activity_02I7SLXLU9R2S2xGrqmoUEaGDgmcs0XHj3I",
                "name": "Condition Branch",
                "title": "Moderate or Noisy",
                "type": "logic.condition_block",
                "base_type": "activity",
                "properties": {
                  "condition": {
                    "left_operand": {
                      "left_operand": "$workflow.definition_workflow_02I7SLWPWTELD4xowUQOLkKNMOLrmPHu9QC.input.variable_workflow_02I7SLWQG36EW63idWgtbMVyCBu094Ufp8D$",
                      "operator": "eqi",
                      "right_operand": "moderate"
                    },
                    "operator": "or",
                    "right_operand": {
                      "left_operand": "$workflow.definition_workflow_02I7SLWPWTELD4xowUQOLkKNMOLrmPHu9QC.input.variable_workflow_02I7SLWQG36EW63idWgtbMVyCBu094Ufp8D$",
                      "operator": "eqi",
                      "right_operand": "noisy"
                    }
                  },
                  "continue_on_failure": false,
                  "display_name": "Moderate or Noisy",
                  "skip_execution": false
                },
                "object_type": "definition_activity",
                "actions": [
                  {
                    "unique_name": "definition_activity_02I7SLXNIZFED1301LobMg5PSDvCgdLMdIR",
                    "name": "Set Variables",
                    "title": "Set local variable",
                    "type": "core.set_multiple_variables",
                    "base_type": "activity",
                    "properties": {
                      "continue_on_failure": false,
                      "display_name": "Set local variable",
                      "skip_execution": false,
                      "variables_to_update": [
                        {
                          "variable_to_update": "$workflow.definition_workflow_02I7SLWPWTELD4xowUQOLkKNMOLrmPHu9QC.local.variable_workflow_02I7SLWQG2HWI48YbsBhzkzvZ4gpadrMUyn$",
                          "variable_value_new": "$activity.definition_activity_02I7SLX722SQZ5qnd7Mk2oMX2Str2AI7FmV.input.source_array[@].observables$"
                        }
                      ]
                    },
                    "object_type": "definition_activity"
                  }
                ]
              }
            ]
          },
          {
            "unique_name": "definition_activity_02I7SLXOZY1700CSSITXri44FMPxRA5OdmP",
            "name": "Execute Python Script",
            "title": "Build the request payload",
            "type": "python3.script",
            "base_type": "activity",
            "properties": {
              "action_timeout": 180,
              "continue_on_failure": false,
              "display_name": "Build the request payload",
              "script": "import sys\nimport json\nfrom datetime import datetime, timedelta\n\nobservableType = sys.argv[1]\nobservables = json.loads(sys.argv[2])\nintegrations = json.loads(sys.argv[3])\n\nnow = datetime.now()\nthirtyDaysAgo = now - timedelta(days=30)\n\npayload = {\n  \"observables\": observables,\n  \"modules\": integrations[observableType],\n  \"time_window\": {\n    \"start_time\": thirtyDaysAgo.isoformat(),\n    \"end_time\": now.isoformat()\n  },\n  \"source\": \"Cisco XDR Automated Question\",\n  \"title\": \"Automated investigation for \" + str(len(observables)) + \" \" + observableType + \" observables\",\n  \"description\": \"Automated investigation for \" + str(len(observables)) + \" \" + observableType + \" observables\"\n}\n\npayload = json.dumps(payload)",
              "script_arguments": [
                "$activity.definition_activity_02I7SLX722SQZ5qnd7Mk2oMX2Str2AI7FmV.input.source_array[@].type$",
                "$workflow.definition_workflow_02I7SLWPWTELD4xowUQOLkKNMOLrmPHu9QC.local.variable_workflow_02I7SLWQG2HWI48YbsBhzkzvZ4gpadrMUyn$",
                "$activity.definition_activity_02I7SLX01VIT62ks2ASqfP2szCkqP4niOfw.output.script_queries.integrationsOut$"
              ],
              "script_queries": [
                {
                  "script_query": "payload",
                  "script_query_name": "payload",
                  "script_query_type": "string"
                }
              ],
              "skip_execution": false
            },
            "object_type": "definition_activity"
          },
          {
            "unique_name": "definition_activity_02I7SLXQONEPR643szYLy5hKuXgxSwg0yWK",
            "name": "HTTP Request",
            "title": "Create the investigation",
            "type": "web-service.http_request",
            "base_type": "activity",
            "properties": {
              "accept": "application/json",
              "action_timeout": 180,
              "allow_auto_redirect": true,
              "allow_headers_redirect": false,
              "body": "$activity.definition_activity_02I7SLXOZY1700CSSITXri44FMPxRA5OdmP.output.script_queries.payload$",
              "content_type": "application/json",
              "continue_on_error_status_code": true,
              "continue_on_failure": false,
              "display_name": "Create the investigation",
              "method": "POST",
              "relative_url": "/v2/investigation",
              "runtime_user": {
                "target_default": true
              },
              "skip_execution": false,
              "target": {
                "override_workflow_target_group_criteria": true,
                "target_group": {
                  "run_on_all_targets": false,
                  "use_criteria": {
                    "choose_target_using_algorithm": "choose_first_with_matching_criteria",
                    "conditions": [
                      {
                        "left_operand": "$targetgroup.web-service endpoint.input.display_name$",
                        "operator": "eqi",
                        "right_operand": "Conure APIs"
                      }
                    ]
                  }
                }
              }
            },
            "object_type": "definition_activity"
          },
          {
            "unique_name": "definition_activity_02I7SLXS78SY95mkGqRGILc8NX3ILgj2cVe",
            "name": "Condition Block",
            "title": "Was the request successful?",
            "type": "logic.if_else",
            "base_type": "activity",
            "properties": {
              "conditions": [],
              "continue_on_failure": false,
              "display_name": "Was the request successful?",
              "skip_execution": false
            },
            "object_type": "definition_activity",
            "blocks": [
              {
                "unique_name": "definition_activity_02I7SLXTEUOH118hLb2L01dnNdNZ4NfaetT",
                "name": "Condition Branch",
                "title": "200/Success",
                "type": "logic.condition_block",
                "base_type": "activity",
                "properties": {
                  "condition": {
                    "left_operand": "$activity.definition_activity_02I7SLXQONEPR643szYLy5hKuXgxSwg0yWK.output.status_code$",
                    "operator": "eq",
                    "right_operand": 200
                  },
                  "continue_on_failure": false,
                  "display_name": "200/Success",
                  "skip_execution": false
                },
                "object_type": "definition_activity",
                "actions": [
                  {
                    "unique_name": "definition_activity_02I7SLXV4O7RR2uK120umnBFB3YsAdlPCu4",
                    "name": "JSONPath Query",
                    "title": "Extract the investigation ID",
                    "type": "corejava.jsonpathquery",
                    "base_type": "activity",
                    "properties": {
                      "action_timeout": 180,
                      "continue_on_failure": true,
                      "display_name": "Extract the investigation ID",
                      "input_json": "$activity.definition_activity_02I7SLXQONEPR643szYLy5hKuXgxSwg0yWK.output.response_body$",
                      "jsonpath_queries": [
                        {
                          "jsonpath_query": "$.investigation_id",
                          "jsonpath_query_name": "investigationId",
                          "jsonpath_query_type": "string",
                          "zdate_type_format": "yyyy-MM-dd'T'HH:mm:ssZ"
                        }
                      ],
                      "skip_execution": false
                    },
                    "object_type": "definition_activity"
                  },
                  {
                    "unique_name": "definition_activity_02I7SLXWLN6046008yoGxYyIUsDbUMgQXdy",
                    "name": "Condition Block",
                    "title": "Was extraction successful?",
                    "type": "logic.if_else",
                    "base_type": "activity",
                    "properties": {
                      "conditions": [],
                      "continue_on_failure": false,
                      "display_name": "Was extraction successful?",
                      "skip_execution": false
                    },
                    "object_type": "definition_activity",
                    "blocks": [
                      {
                        "unique_name": "definition_activity_02I7SLXXXF0WB34BuPx5fVPlrD7gdTw2hDt",
                        "name": "Condition Branch",
                        "title": "No",
                        "type": "logic.condition_block",
                        "base_type": "activity",
                        "properties": {
                          "condition": {
                            "left_operand": "$activity.definition_activity_02I7SLXV4O7RR2uK120umnBFB3YsAdlPCu4.output.succeeded$",
                            "operator": "eq",
                            "right_operand": false
                          },
                          "continue_on_failure": false,
                          "display_name": "No",
                          "skip_execution": false
                        },
                        "object_type": "definition_activity",
                        "actions": [
                          {
                            "unique_name": "definition_activity_02I7SLXZEZ6AI4pKeCQuKJnCkKx8FE2JpA7",
                            "name": "Completed",
                            "title": "Failed",
                            "type": "logic.completed",
                            "base_type": "activity",
                            "properties": {
                              "completion_type": "failed-completed",
                              "continue_on_failure": false,
                              "display_name": "Failed",
                              "result_message": "Failed to extract the investigation ID\n\nResponse body: $activity.definition_activity_02I7SLXQONEPR643szYLy5hKuXgxSwg0yWK.output.response_body$",
                              "skip_execution": false
                            },
                            "object_type": "definition_activity"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "unique_name": "definition_activity_02I7SLY0I7WNF1vUXugIXVF6IsaBosEYYzH",
                    "name": "Execute Python Script",
                    "title": "Add the investigation ID to the list",
                    "type": "python3.script",
                    "base_type": "activity",
                    "properties": {
                      "action_timeout": 180,
                      "continue_on_failure": false,
                      "display_name": "Add the investigation ID to the list",
                      "script": "import sys\nimport json\n\ninvestigationIds = sys.argv[1]\ninvestigationId = sys.argv[2]\nobservableType = sys.argv[3]\n\nif len(investigationIds) \u003e 0:\n  investigationIds = json.loads(investigationIds)\nelse:\n  investigationIds = []\n\n#investigationIds.append({\n#  'observableType': observableType,\n#  'investigationId': investigationId\n#})\n\ninvestigationIds.append(investigationId)\n\ninvestigationIds = json.dumps(investigationIds)",
                      "script_arguments": [
                        "$workflow.definition_workflow_02I7SLWPWTELD4xowUQOLkKNMOLrmPHu9QC.output.workflow_results$",
                        "$activity.definition_activity_02I7SLXV4O7RR2uK120umnBFB3YsAdlPCu4.output.jsonpath_queries.investigationId$",
                        "$activity.definition_activity_02I7SLX722SQZ5qnd7Mk2oMX2Str2AI7FmV.input.source_array[@].type$"
                      ],
                      "script_queries": [
                        {
                          "script_query": "investigationIds",
                          "script_query_name": "investigationIds",
                          "script_query_type": "string"
                        }
                      ],
                      "skip_execution": false
                    },
                    "object_type": "definition_activity"
                  },
                  {
                    "unique_name": "definition_activity_02I7SLY2ENE416OU6KhOPdPLTp93d4amZVq",
                    "name": "Set Variables",
                    "title": "Update local variables",
                    "type": "core.set_multiple_variables",
                    "base_type": "activity",
                    "properties": {
                      "continue_on_failure": false,
                      "display_name": "Update local variables",
                      "skip_execution": false,
                      "variables_to_update": [
                        {
                          "variable_to_update": "$workflow.definition_workflow_02I7SLWPWTELD4xowUQOLkKNMOLrmPHu9QC.output.workflow_results$",
                          "variable_value_new": "$activity.definition_activity_02I7SLY0I7WNF1vUXugIXVF6IsaBosEYYzH.output.script_queries.investigationIds$"
                        }
                      ]
                    },
                    "object_type": "definition_activity"
                  }
                ]
              },
              {
                "unique_name": "definition_activity_02I7SLY43PTBF1jjX8UaTLUPunvaqDDndNJ",
                "name": "Condition Branch",
                "title": "Anything else",
                "type": "logic.condition_block",
                "base_type": "activity",
                "properties": {
                  "condition": {
                    "left_operand": "$activity.definition_activity_02I7SLXQONEPR643szYLy5hKuXgxSwg0yWK.output.status_code$",
                    "operator": "ne",
                    "right_operand": 200
                  },
                  "continue_on_failure": false,
                  "display_name": "Anything else",
                  "skip_execution": false
                },
                "object_type": "definition_activity",
                "actions": [
                  {
                    "unique_name": "definition_activity_02I7SLY5PKXS13vSQ4qTIuoDQtvKMzpMoZD",
                    "name": "Completed",
                    "title": "Failed",
                    "type": "logic.completed",
                    "base_type": "activity",
                    "properties": {
                      "completion_type": "failed-completed",
                      "continue_on_failure": false,
                      "display_name": "Failed",
                      "result_message": "Failed to create the investigation for $activity.definition_activity_02I7SLX722SQZ5qnd7Mk2oMX2Str2AI7FmV.input.source_array[@].type$ observables\n\nStatus code: $activity.definition_activity_02I7SLXQONEPR643szYLy5hKuXgxSwg0yWK.output.status_code$\nResponse body: $activity.definition_activity_02I7SLXQONEPR643szYLy5hKuXgxSwg0yWK.output.response_body$",
                      "skip_execution": false
                    },
                    "object_type": "definition_activity"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "unique_name": "definition_activity_02I7SLY73GCYC58Rsn0tiazys08j048xxkX",
        "name": "Set Variables",
        "title": "Set file path",
        "type": "core.set_multiple_variables",
        "base_type": "activity",
        "properties": {
          "continue_on_failure": false,
          "display_name": "Set file path",
          "skip_execution": false,
          "variables_to_update": [
            {
              "variable_to_update": "$workflow.definition_workflow_02I7SLWPWTELD4xowUQOLkKNMOLrmPHu9QC.local.variable_workflow_02I7SLWQG2QSU6S29vhMjFkAkDmq3zfPkYx$",
              "variable_value_new": "chain_id=$workflow.definition_workflow_02I7SLWPWTELD4xowUQOLkKNMOLrmPHu9QC.input.variable_workflow_02I7SLWQG2YYY3c9nqBK1ZEtuiwfg8gYUyZ$/$workflow.definition_workflow_02I7SLWPWTELD4xowUQOLkKNMOLrmPHu9QC.output.instance_id$.json"
            }
          ]
        },
        "object_type": "definition_activity"
      }
    ],
    "categories": [
      "category_1BMfMXSnJMyt5Ihqi7rWJr5N8cf"
    ]
  },
  "atomic_workflows": [
    "definition_workflow_02HSRQ9SJD8SX2olZihv5ICOd5MggSxVfUD",
    "definition_workflow_029824AN9OC6K34kBzqjL6SXC0s68449YGU"
  ],
  "dependent_workflows": [
    "definition_workflow_02HSRQ9SJD8SX2olZihv5ICOd5MggSxVfUD",
    "definition_workflow_029824AN9OC6K34kBzqjL6SXC0s68449YGU"
  ]
}